{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Seat","props","className","style","backgroundColor","colors","status","onClick","number","InfoBoxes","SaveBooking","available","used","selected","amountOfSeats","range","min","max","Array","from","length","_","i","Cinema","useState","candidateNums","setCandidateNums","takenNums","setTakenNums","numberStatus","includes","onNumberClick","currentStatus","newCandidateNums","concat","filter","cn","console","log","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAIMA,G,MAAO,SAAAC,GAAK,OAChB,4BACEC,UAAU,SACVC,MAAO,CAAEC,gBAAiBC,EAAOJ,EAAMK,SACvCC,QAAS,kBAAMN,EAAMM,QAAQN,EAAMO,OAAQP,EAAMK,UAEhDL,EAAMO,UAILC,EAAY,kBAChB,oCACE,yBAAKP,UAAU,SAASC,MAAO,CAAEC,gBAAiBC,EAAM,YACtD,uBAAGH,UAAU,YAAb,UAEF,yBAAKA,UAAU,SAASC,MAAO,CAAEC,gBAAiBC,EAAM,WACtD,uBAAGH,UAAU,YAAb,SAEF,yBAAKA,UAAU,SAASC,MAAO,CAAEC,gBAAiBC,EAAM,OACtD,uBAAGH,UAAU,YAAb,YAKAQ,EAAc,SAAAT,GAAK,OACvB,4BAAQC,UAAU,OAAOK,QAAS,kBAAMN,EAAMM,YAA9C,iBA4DIF,EAAS,CACbM,UAAW,aACXC,KAAM,aACNC,SAAU,UAGNC,EAAgB,CAEpBC,MAAO,SAACC,EAAKC,GAAN,OAAcC,MAAMC,KAAK,CAAEC,OAAQH,EAAMD,EAAM,IAAK,SAACK,EAAGC,GAAJ,OAAUN,EAAMM,OAG9DC,EAlEA,WAAO,IAAD,EACuBC,mBAAS,IADhC,mBACZC,EADY,KACGC,EADH,OAEeF,mBAAS,IAFxB,mBAEZG,EAFY,KAEDC,EAFC,KAIbC,EAAe,SAAArB,GACnB,OAAImB,EAAUG,SAAStB,GACd,OAELiB,EAAcK,SAAStB,GAClB,WAEF,aAGHuB,EAAgB,SAACvB,EAAQwB,GAC7B,GAAsB,SAAlBA,EAAJ,CAGA,IAAMC,EACc,cAAlBD,EACIP,EAAcS,OAAO1B,GACrBiB,EAAcU,QAAO,SAAAC,GAAE,OAAIA,IAAO5B,KACxCkB,EAAiBO,GACjBI,QAAQC,IAAIb,EAAcL,UAM5B,OACE,yBAAKlB,UAAU,QACb,yBAAKA,UAAU,QAAf,UACA,yBAAKA,UAAU,QACb,yBAAKA,UAAU,SACZY,EAAcC,MAAM,EAAG,IAAIwB,KAAI,SAC9B/B,GAD8B,OAG9B,kBAAC,EAAD,CACEgC,IAAKhC,EACLA,OAAQA,EACRF,OAAQuB,EAAarB,GACrBD,QAASwB,QAIf,yBAAK7B,UAAU,WACb,kBAAC,EAAD,CAAaK,QApBH,WAChBqB,EAAaH,MAoBP,kBAAC,EAAD,UCrEUgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,SD6H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9af0dda3.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nimport \"./App.css\";\n\nconst Seat = props => (\n  <button\n    className=\"number\"\n    style={{ backgroundColor: colors[props.status] }}\n    onClick={() => props.onClick(props.number, props.status)}\n  >\n    {props.number}\n  </button>\n);\n\nconst InfoBoxes = () => (\n  <>\n    <div className=\"number\" style={{ backgroundColor: colors[\"available\"] }}>\n      <p className=\"infoText\">Ledig</p>\n    </div>\n    <div className=\"number\" style={{ backgroundColor: colors[\"selected\"] }}>\n      <p className=\"infoText\">Vald</p>\n    </div>\n    <div className=\"number\" style={{ backgroundColor: colors[\"used\"] }}>\n      <p className=\"infoText\">Bokad</p>\n    </div>\n  </>\n);\n\nconst SaveBooking = props => (\n  <button className=\"save\" onClick={() => props.onClick()}>\n    Boka platser\n  </button>\n);\n\nconst Cinema = () => {\n  const [candidateNums, setCandidateNums] = useState([]);\n  const [takenNums, setTakenNums] = useState([]);\n\n  const numberStatus = number => {\n    if (takenNums.includes(number)) {\n      return \"used\";\n    }\n    if (candidateNums.includes(number)) {\n      return \"selected\";\n    }\n    return \"available\";\n  };\n\n  const onNumberClick = (number, currentStatus) => {\n    if (currentStatus === \"used\") {\n      return;\n    }\n    const newCandidateNums =\n      currentStatus === \"available\"\n        ? candidateNums.concat(number)\n        : candidateNums.filter(cn => cn !== number);\n    setCandidateNums(newCandidateNums);\n    console.log(candidateNums.length);\n  };\n\n  const saveSeats = () => {\n    setTakenNums(candidateNums);\n  };\n  return (\n    <div className=\"game\">\n      <div className=\"help\">Bioduk</div>\n      <div className=\"body\">\n        <div className=\"right\">\n          {amountOfSeats.range(1, 25).map((\n            number // Antal platser, ändra här för att öka. Måste även ändra divvens storlek i css\n          ) => (\n            <Seat\n              key={number}\n              number={number}\n              status={numberStatus(number)}\n              onClick={onNumberClick}\n            />\n          ))}\n        </div>\n        <div className=\"saveBtn\">\n          <SaveBooking onClick={saveSeats}></SaveBooking>\n          <InfoBoxes></InfoBoxes>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Färger\nconst colors = {\n  available: \"lightgreen\",\n  used: \"lightcoral\",\n  selected: \"yellow\"\n};\n\nconst amountOfSeats = {\n  // Skapar en array med alla platser\n  range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i)\n};\n\nexport default Cinema;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Cinema from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Cinema />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}